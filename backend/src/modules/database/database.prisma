generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Customer {
  firebaseId       String                       @id @map("_id")
  name             String
  dateOfBirth      DateTime?
  email            String
  photoUrl         String?
  homeAddress      String?
  permanentAddress String?
  shippingAddress  String?
  shippingLocation Location?                    @relation(fields: [locationId], references: [id])
  contactNumbers   String[]
  gender           Gender
  createdAt        DateTime                     @default(now())
  updatedAt        DateTime                     @updatedAt
  locationId       String?
  interests        CustomerInterestOnCustomer[]

  Cart Cart?
  favorites Favorite[]
}

model Favorite {
  id             String           @id @default(cuid()) @map("_id")
  customerId       String
  productVariantId String
  customer         Customer       @relation(fields: [customerId], references: [firebaseId])
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])

  @@unique([customerId, productVariantId])
}

model CustomerInterest {
  name      String                       @id @map("_id")
  customers CustomerInterestOnCustomer[]
}

model CustomerInterestOnCustomer {
  id                   String           @id @default(cuid()) @map("_id")
  customerId           String
  customerInterestName String
  customer             Customer         @relation(fields: [customerId], references: [firebaseId])
  customerInterest     CustomerInterest @relation(fields: [customerInterestName], references: [name])

  @@unique([customerId, customerInterestName])
}

model Cart {
  id         String      @id @default(cuid()) @map("_id")
  customerId String      @unique
  deliveryCharge Float   @default(60)
  items      OrderItem[]
  customer   Customer    @relation(fields: [customerId], references: [firebaseId])
}

model OrderItem {
  id             String               @id @default(cuid()) @map("_id")
  productVariantId      String
  quantity       Int
  cartId         String

  isCheckedOut   Boolean              @default(false)
  deliveryStatus DeliveryStatus       @default(PENDING)
  paymentStatus  PaymentStatus        @default(PENDING)
  orderStatus    OrderStatus          @default(PENDING)

  transaction    TransactionHistory[]
  productVariant        ProductVariant              @relation(fields: [productVariantId], references: [id])
  cart           Cart                 @relation(fields: [cartId], references: [id])
}

model TransactionHistory {
  id            String    @id @default(cuid()) @map("_id")
  orderItemId   String
  timestamp     DateTime  @default(now())
  amount        Float
  paymentMethod PaymentMethod @default(CASH_ON_DELIVERY)
  orderItem     OrderItem @relation(fields: [orderItemId], references: [id])
}

model Discount {
  id          String              @id @default(cuid()) @map("_id")
  name        String
  description String
  percentage  Float
  bannerUrl   String
  startDate   DateTime
  endDate     DateTime
  products    DiscountOnProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DiscountOnProduct {
  id         String   @id @default(cuid()) @map("_id")
  discountId String
  productId  String
  discount   Discount @relation(fields: [discountId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  @@unique([discountId, productId])
}

model Product {
  id          String   @id @default(cuid()) @map("_id")

  //input
  name        String
  description String
  categoryId String?

  //automated
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  continued   Boolean  @default(true)

  variants   ProductVariant[]
  Category   Category?           @relation(fields: [categoryId], references: [id])
  discounts  DiscountOnProduct[]
}

model ProductVariant {
  id             String  @id @default(cuid()) @map("_id")
  additionalName String
  size           String
  color          String
  imageUrl       String[]
  gender         Gender?
  stock          Int
  price          Float
  productId      String
  product        Product @relation(fields: [productId], references: [id])

  Favorite Favorite[]
  OrderItem  OrderItem[]
}

model Category {
  id               String     @id @default(cuid()) @map("_id")
  name             String
  description      String
  imageUrl         String
  parentCategoryId String?
  genderSpecific   Boolean   @default(false)
  gender           Gender?  
  parentCategory   Category?  @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childCategories  Category[] @relation("CategoryHierarchy")
  products         Product[]
}

model Location {
  id        String     @id @default(cuid()) @map("_id")
  latitude  Float
  longitude Float
  Customer  Customer[]
}

enum Gender {
  MALE
  FEMALE
}

enum DeliveryStatus {
  PENDING
  DISPATCHED
  DELIVERED
  CANCELLED
}

enum OrderStatus {
  PENDING
  CHECKED_OUT
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  CASH_ON_DELIVERY
  CREDIT_CARD
  DEBIT_CARD
  MOBILE_BANKING
  OTHER
}
